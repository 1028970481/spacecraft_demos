/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Avatar : AvatarBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Avatar.def
	// Please inherit and implement "class Avatar : AvatarBase"
	public abstract class AvatarBase : Entity
	{
		public EntityBaseEntityCall_AvatarBase baseEntityCall = null;
		public EntityCellEntityCall_AvatarBase cellEntityCall = null;

		public UInt32 Die_Count = 0;
		public virtual void onDie_CountChanged(UInt32 oldValue) {}
		public Int32 EXP = 0;
		public virtual void onEXPChanged(Int32 oldValue) {}
		public Int32 EXP_Max = 0;
		public virtual void onEXP_MaxChanged(Int32 oldValue) {}
		public Int32 HP = 0;
		public virtual void onHPChanged(Int32 oldValue) {}
		public Int32 HP_Max = 0;
		public virtual void onHP_MaxChanged(Int32 oldValue) {}
		public UInt32 Kill_Count = 0;
		public virtual void onKill_CountChanged(UInt32 oldValue) {}
		public Int32 MP = 0;
		public virtual void onMPChanged(Int32 oldValue) {}
		public Int32 MP_Max = 0;
		public virtual void onMP_MaxChanged(Int32 oldValue) {}
		public UInt32 Rank = 0;
		public virtual void onRankChanged(UInt32 oldValue) {}
		public Int32 Round = 0;
		public virtual void onRoundChanged(Int32 oldValue) {}
		public Int32 Round_Max = 0;
		public virtual void onRound_MaxChanged(Int32 oldValue) {}
		public UInt32 Score = 0;
		public virtual void onScoreChanged(UInt32 oldValue) {}
		public UInt16 cruiseSpeed = 0;
		public virtual void onCruiseSpeedChanged(UInt16 oldValue) {}
		public UInt16 level = 0;
		public virtual void onLevelChanged(UInt16 oldValue) {}
		public UInt32 modelID = 0;
		public virtual void onModelIDChanged(UInt32 oldValue) {}
		public Byte modelScale = 30;
		public virtual void onModelScaleChanged(Byte oldValue) {}
		public UInt16 moveSpeed = 50;
		public virtual void onMoveSpeedChanged(UInt16 oldValue) {}
		public string name = "";
		public virtual void onNameChanged(string oldValue) {}
		public UInt32 spaceUType = 0;
		public virtual void onSpaceUTypeChanged(UInt32 oldValue) {}
		public SByte state = 0;
		public virtual void onStateChanged(SByte oldValue) {}
		public UInt32 uid = 0;
		public virtual void onUidChanged(UInt32 oldValue) {}
		public UInt32 utype = 0;
		public virtual void onUtypeChanged(UInt32 oldValue) {}

		public abstract void canUseWeaponResult(UInt16 arg1, Byte arg2); 
		public abstract void onJump(); 
		public abstract void recvDamage(Int32 arg1, Int32 arg2, Int32 arg3, Int32 arg4); 
		public abstract void recvPropEffect(UInt32 arg1, Int32 arg2); 

		public AvatarBase()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AvatarBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AvatarBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.useMethodDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
				methodUtype = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				case 61003:
					UInt16 canUseWeaponResult_arg1 = stream.readUint16();
					Byte canUseWeaponResult_arg2 = stream.readUint8();
					canUseWeaponResult(canUseWeaponResult_arg1, canUseWeaponResult_arg2);
					break;
				case 17:
					onJump();
					break;
				case 21:
					Int32 recvDamage_arg1 = stream.readInt32();
					Int32 recvDamage_arg2 = stream.readInt32();
					Int32 recvDamage_arg3 = stream.readInt32();
					Int32 recvDamage_arg4 = stream.readInt32();
					recvDamage(recvDamage_arg1, recvDamage_arg2, recvDamage_arg3, recvDamage_arg4);
					break;
				case 22:
					UInt32 recvPropEffect_arg1 = stream.readUint32();
					Int32 recvPropEffect_arg2 = stream.readInt32();
					recvPropEffect(recvPropEffect_arg1, recvPropEffect_arg2);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 48005:
						UInt32 oldval_Die_Count = Die_Count;
						Die_Count = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onDie_CountChanged(oldval_Die_Count);
						}
						else
						{
							if(inWorld)
								onDie_CountChanged(oldval_Die_Count);
						}

						break;
					case 47005:
						Int32 oldval_EXP = EXP;
						EXP = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onEXPChanged(oldval_EXP);
						}
						else
						{
							if(inWorld)
								onEXPChanged(oldval_EXP);
						}

						break;
					case 47006:
						Int32 oldval_EXP_Max = EXP_Max;
						EXP_Max = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onEXP_MaxChanged(oldval_EXP_Max);
						}
						else
						{
							if(inWorld)
								onEXP_MaxChanged(oldval_EXP_Max);
						}

						break;
					case 47001:
						Int32 oldval_HP = HP;
						HP = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onHPChanged(oldval_HP);
						}
						else
						{
							if(inWorld)
								onHPChanged(oldval_HP);
						}

						break;
					case 47002:
						Int32 oldval_HP_Max = HP_Max;
						HP_Max = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onHP_MaxChanged(oldval_HP_Max);
						}
						else
						{
							if(inWorld)
								onHP_MaxChanged(oldval_HP_Max);
						}

						break;
					case 48006:
						UInt32 oldval_Kill_Count = Kill_Count;
						Kill_Count = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onKill_CountChanged(oldval_Kill_Count);
						}
						else
						{
							if(inWorld)
								onKill_CountChanged(oldval_Kill_Count);
						}

						break;
					case 47003:
						Int32 oldval_MP = MP;
						MP = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onMPChanged(oldval_MP);
						}
						else
						{
							if(inWorld)
								onMPChanged(oldval_MP);
						}

						break;
					case 47004:
						Int32 oldval_MP_Max = MP_Max;
						MP_Max = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onMP_MaxChanged(oldval_MP_Max);
						}
						else
						{
							if(inWorld)
								onMP_MaxChanged(oldval_MP_Max);
						}

						break;
					case 48003:
						UInt32 oldval_Rank = Rank;
						Rank = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onRankChanged(oldval_Rank);
						}
						else
						{
							if(inWorld)
								onRankChanged(oldval_Rank);
						}

						break;
					case 48001:
						Int32 oldval_Round = Round;
						Round = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onRoundChanged(oldval_Round);
						}
						else
						{
							if(inWorld)
								onRoundChanged(oldval_Round);
						}

						break;
					case 48002:
						Int32 oldval_Round_Max = Round_Max;
						Round_Max = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onRound_MaxChanged(oldval_Round_Max);
						}
						else
						{
							if(inWorld)
								onRound_MaxChanged(oldval_Round_Max);
						}

						break;
					case 48004:
						UInt32 oldval_Score = Score;
						Score = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onScoreChanged(oldval_Score);
						}
						else
						{
							if(inWorld)
								onScoreChanged(oldval_Score);
						}

						break;
					case 12:
						UInt16 oldval_cruiseSpeed = cruiseSpeed;
						cruiseSpeed = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onCruiseSpeedChanged(oldval_cruiseSpeed);
						}
						else
						{
							if(inWorld)
								onCruiseSpeedChanged(oldval_cruiseSpeed);
						}

						break;
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 41002:
						UInt16 oldval_level = level;
						level = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onLevelChanged(oldval_level);
						}
						else
						{
							if(inWorld)
								onLevelChanged(oldval_level);
						}

						break;
					case 42006:
						UInt32 oldval_modelID = modelID;
						modelID = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onModelIDChanged(oldval_modelID);
						}
						else
						{
							if(inWorld)
								onModelIDChanged(oldval_modelID);
						}

						break;
					case 42007:
						Byte oldval_modelScale = modelScale;
						modelScale = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onModelScaleChanged(oldval_modelScale);
						}
						else
						{
							if(inWorld)
								onModelScaleChanged(oldval_modelScale);
						}

						break;
					case 11:
						UInt16 oldval_moveSpeed = moveSpeed;
						moveSpeed = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onMoveSpeedChanged(oldval_moveSpeed);
						}
						else
						{
							if(inWorld)
								onMoveSpeedChanged(oldval_moveSpeed);
						}

						break;
					case 42003:
						string oldval_name = name;
						name = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onNameChanged(oldval_name);
						}
						else
						{
							if(inWorld)
								onNameChanged(oldval_name);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					case 42008:
						UInt32 oldval_spaceUType = spaceUType;
						spaceUType = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onSpaceUTypeChanged(oldval_spaceUType);
						}
						else
						{
							if(inWorld)
								onSpaceUTypeChanged(oldval_spaceUType);
						}

						break;
					case 44006:
						SByte oldval_state = state;
						state = stream.readInt8();

						if(prop.isBase())
						{
							if(inited)
								onStateChanged(oldval_state);
						}
						else
						{
							if(inWorld)
								onStateChanged(oldval_state);
						}

						break;
					case 42004:
						UInt32 oldval_uid = uid;
						uid = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUidChanged(oldval_uid);
						}
						else
						{
							if(inWorld)
								onUidChanged(oldval_uid);
						}

						break;
					case 42005:
						UInt32 oldval_utype = utype;
						utype = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUtypeChanged(oldval_utype);
						}
						else
						{
							if(inWorld)
								onUtypeChanged(oldval_utype);
						}

						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			UInt32 oldval_Die_Count = Die_Count;
			Property prop_Die_Count = pdatas[4];
			if(prop_Die_Count.isBase())
			{
				if(inited && !inWorld)
					onDie_CountChanged(oldval_Die_Count);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Die_Count.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDie_CountChanged(oldval_Die_Count);
					}
				}
			}

			Int32 oldval_EXP = EXP;
			Property prop_EXP = pdatas[5];
			if(prop_EXP.isBase())
			{
				if(inited && !inWorld)
					onEXPChanged(oldval_EXP);
			}
			else
			{
				if(inWorld)
				{
					if(prop_EXP.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onEXPChanged(oldval_EXP);
					}
				}
			}

			Int32 oldval_EXP_Max = EXP_Max;
			Property prop_EXP_Max = pdatas[6];
			if(prop_EXP_Max.isBase())
			{
				if(inited && !inWorld)
					onEXP_MaxChanged(oldval_EXP_Max);
			}
			else
			{
				if(inWorld)
				{
					if(prop_EXP_Max.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onEXP_MaxChanged(oldval_EXP_Max);
					}
				}
			}

			Int32 oldval_HP = HP;
			Property prop_HP = pdatas[7];
			if(prop_HP.isBase())
			{
				if(inited && !inWorld)
					onHPChanged(oldval_HP);
			}
			else
			{
				if(inWorld)
				{
					if(prop_HP.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHPChanged(oldval_HP);
					}
				}
			}

			Int32 oldval_HP_Max = HP_Max;
			Property prop_HP_Max = pdatas[8];
			if(prop_HP_Max.isBase())
			{
				if(inited && !inWorld)
					onHP_MaxChanged(oldval_HP_Max);
			}
			else
			{
				if(inWorld)
				{
					if(prop_HP_Max.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHP_MaxChanged(oldval_HP_Max);
					}
				}
			}

			UInt32 oldval_Kill_Count = Kill_Count;
			Property prop_Kill_Count = pdatas[9];
			if(prop_Kill_Count.isBase())
			{
				if(inited && !inWorld)
					onKill_CountChanged(oldval_Kill_Count);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Kill_Count.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onKill_CountChanged(oldval_Kill_Count);
					}
				}
			}

			Int32 oldval_MP = MP;
			Property prop_MP = pdatas[10];
			if(prop_MP.isBase())
			{
				if(inited && !inWorld)
					onMPChanged(oldval_MP);
			}
			else
			{
				if(inWorld)
				{
					if(prop_MP.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMPChanged(oldval_MP);
					}
				}
			}

			Int32 oldval_MP_Max = MP_Max;
			Property prop_MP_Max = pdatas[11];
			if(prop_MP_Max.isBase())
			{
				if(inited && !inWorld)
					onMP_MaxChanged(oldval_MP_Max);
			}
			else
			{
				if(inWorld)
				{
					if(prop_MP_Max.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMP_MaxChanged(oldval_MP_Max);
					}
				}
			}

			UInt32 oldval_Rank = Rank;
			Property prop_Rank = pdatas[12];
			if(prop_Rank.isBase())
			{
				if(inited && !inWorld)
					onRankChanged(oldval_Rank);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Rank.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRankChanged(oldval_Rank);
					}
				}
			}

			Int32 oldval_Round = Round;
			Property prop_Round = pdatas[13];
			if(prop_Round.isBase())
			{
				if(inited && !inWorld)
					onRoundChanged(oldval_Round);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Round.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoundChanged(oldval_Round);
					}
				}
			}

			Int32 oldval_Round_Max = Round_Max;
			Property prop_Round_Max = pdatas[14];
			if(prop_Round_Max.isBase())
			{
				if(inited && !inWorld)
					onRound_MaxChanged(oldval_Round_Max);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Round_Max.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRound_MaxChanged(oldval_Round_Max);
					}
				}
			}

			UInt32 oldval_Score = Score;
			Property prop_Score = pdatas[15];
			if(prop_Score.isBase())
			{
				if(inited && !inWorld)
					onScoreChanged(oldval_Score);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Score.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onScoreChanged(oldval_Score);
					}
				}
			}

			UInt16 oldval_cruiseSpeed = cruiseSpeed;
			Property prop_cruiseSpeed = pdatas[16];
			if(prop_cruiseSpeed.isBase())
			{
				if(inited && !inWorld)
					onCruiseSpeedChanged(oldval_cruiseSpeed);
			}
			else
			{
				if(inWorld)
				{
					if(prop_cruiseSpeed.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onCruiseSpeedChanged(oldval_cruiseSpeed);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			UInt16 oldval_level = level;
			Property prop_level = pdatas[17];
			if(prop_level.isBase())
			{
				if(inited && !inWorld)
					onLevelChanged(oldval_level);
			}
			else
			{
				if(inWorld)
				{
					if(prop_level.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLevelChanged(oldval_level);
					}
				}
			}

			UInt32 oldval_modelID = modelID;
			Property prop_modelID = pdatas[18];
			if(prop_modelID.isBase())
			{
				if(inited && !inWorld)
					onModelIDChanged(oldval_modelID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelIDChanged(oldval_modelID);
					}
				}
			}

			Byte oldval_modelScale = modelScale;
			Property prop_modelScale = pdatas[19];
			if(prop_modelScale.isBase())
			{
				if(inited && !inWorld)
					onModelScaleChanged(oldval_modelScale);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelScale.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelScaleChanged(oldval_modelScale);
					}
				}
			}

			UInt16 oldval_moveSpeed = moveSpeed;
			Property prop_moveSpeed = pdatas[20];
			if(prop_moveSpeed.isBase())
			{
				if(inited && !inWorld)
					onMoveSpeedChanged(oldval_moveSpeed);
			}
			else
			{
				if(inWorld)
				{
					if(prop_moveSpeed.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMoveSpeedChanged(oldval_moveSpeed);
					}
				}
			}

			string oldval_name = name;
			Property prop_name = pdatas[21];
			if(prop_name.isBase())
			{
				if(inited && !inWorld)
					onNameChanged(oldval_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onNameChanged(oldval_name);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			UInt32 oldval_spaceUType = spaceUType;
			Property prop_spaceUType = pdatas[22];
			if(prop_spaceUType.isBase())
			{
				if(inited && !inWorld)
					onSpaceUTypeChanged(oldval_spaceUType);
			}
			else
			{
				if(inWorld)
				{
					if(prop_spaceUType.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onSpaceUTypeChanged(oldval_spaceUType);
					}
				}
			}

			SByte oldval_state = state;
			Property prop_state = pdatas[23];
			if(prop_state.isBase())
			{
				if(inited && !inWorld)
					onStateChanged(oldval_state);
			}
			else
			{
				if(inWorld)
				{
					if(prop_state.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onStateChanged(oldval_state);
					}
				}
			}

			UInt32 oldval_uid = uid;
			Property prop_uid = pdatas[24];
			if(prop_uid.isBase())
			{
				if(inited && !inWorld)
					onUidChanged(oldval_uid);
			}
			else
			{
				if(inWorld)
				{
					if(prop_uid.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUidChanged(oldval_uid);
					}
				}
			}

			UInt32 oldval_utype = utype;
			Property prop_utype = pdatas[25];
			if(prop_utype.isBase())
			{
				if(inited && !inWorld)
					onUtypeChanged(oldval_utype);
			}
			else
			{
				if(inWorld)
				{
					if(prop_utype.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUtypeChanged(oldval_utype);
					}
				}
			}

		}
	}
}