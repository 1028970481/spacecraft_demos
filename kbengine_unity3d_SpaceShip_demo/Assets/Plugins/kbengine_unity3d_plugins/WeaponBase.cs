/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Weapon : WeaponBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Weapon.def
	// Please inherit and implement "class Weapon : WeaponBase"
	public abstract class WeaponBase : Entity
	{
		public EntityBaseEntityCall_WeaponBase baseEntityCall = null;
		public EntityCellEntityCall_WeaponBase cellEntityCall = null;

		public UInt16 CD = 0;
		public virtual void onCDChanged(UInt16 oldValue) {}
		public UInt16 attackerID = 0;
		public virtual void onAttackerIDChanged(UInt16 oldValue) {}
		public UInt16 cruiseSpeed = 0;
		public virtual void onCruiseSpeedChanged(UInt16 oldValue) {}
		public Vector3 destForward = new Vector3(0f, 0f, 0f);
		public virtual void onDestForwardChanged(Vector3 oldValue) {}
		public UInt32 modelID = 0;
		public virtual void onModelIDChanged(UInt32 oldValue) {}
		public Byte modelScale = 30;
		public virtual void onModelScaleChanged(Byte oldValue) {}
		public UInt16 moveSpeed = 50;
		public virtual void onMoveSpeedChanged(UInt16 oldValue) {}
		public string name = "";
		public virtual void onNameChanged(string oldValue) {}
		public UInt16 ownerID = 0;
		public virtual void onOwnerIDChanged(UInt16 oldValue) {}
		public UInt32 spaceUType = 0;
		public virtual void onSpaceUTypeChanged(UInt32 oldValue) {}
		public SByte state = 0;
		public virtual void onStateChanged(SByte oldValue) {}
		public UInt32 uid = 0;
		public virtual void onUidChanged(UInt32 oldValue) {}
		public UInt32 utype = 0;
		public virtual void onUtypeChanged(UInt32 oldValue) {}

		public abstract void onWeaponDestroy(UInt16 arg1); 

		public WeaponBase()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_WeaponBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_WeaponBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Weapon"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.useMethodDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
				methodUtype = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				case 51005:
					UInt16 onWeaponDestroy_arg1 = stream.readUint16();
					onWeaponDestroy(onWeaponDestroy_arg1);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Weapon"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 51003:
						UInt16 oldval_CD = CD;
						CD = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onCDChanged(oldval_CD);
						}
						else
						{
							if(inWorld)
								onCDChanged(oldval_CD);
						}

						break;
					case 51001:
						UInt16 oldval_attackerID = attackerID;
						attackerID = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onAttackerIDChanged(oldval_attackerID);
						}
						else
						{
							if(inWorld)
								onAttackerIDChanged(oldval_attackerID);
						}

						break;
					case 23:
						UInt16 oldval_cruiseSpeed = cruiseSpeed;
						cruiseSpeed = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onCruiseSpeedChanged(oldval_cruiseSpeed);
						}
						else
						{
							if(inWorld)
								onCruiseSpeedChanged(oldval_cruiseSpeed);
						}

						break;
					case 51004:
						Vector3 oldval_destForward = destForward;
						destForward = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDestForwardChanged(oldval_destForward);
						}
						else
						{
							if(inWorld)
								onDestForwardChanged(oldval_destForward);
						}

						break;
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 42006:
						UInt32 oldval_modelID = modelID;
						modelID = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onModelIDChanged(oldval_modelID);
						}
						else
						{
							if(inWorld)
								onModelIDChanged(oldval_modelID);
						}

						break;
					case 42007:
						Byte oldval_modelScale = modelScale;
						modelScale = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onModelScaleChanged(oldval_modelScale);
						}
						else
						{
							if(inWorld)
								onModelScaleChanged(oldval_modelScale);
						}

						break;
					case 22:
						UInt16 oldval_moveSpeed = moveSpeed;
						moveSpeed = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onMoveSpeedChanged(oldval_moveSpeed);
						}
						else
						{
							if(inWorld)
								onMoveSpeedChanged(oldval_moveSpeed);
						}

						break;
					case 42003:
						string oldval_name = name;
						name = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onNameChanged(oldval_name);
						}
						else
						{
							if(inWorld)
								onNameChanged(oldval_name);
						}

						break;
					case 51002:
						UInt16 oldval_ownerID = ownerID;
						ownerID = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onOwnerIDChanged(oldval_ownerID);
						}
						else
						{
							if(inWorld)
								onOwnerIDChanged(oldval_ownerID);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					case 42008:
						UInt32 oldval_spaceUType = spaceUType;
						spaceUType = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onSpaceUTypeChanged(oldval_spaceUType);
						}
						else
						{
							if(inWorld)
								onSpaceUTypeChanged(oldval_spaceUType);
						}

						break;
					case 44006:
						SByte oldval_state = state;
						state = stream.readInt8();

						if(prop.isBase())
						{
							if(inited)
								onStateChanged(oldval_state);
						}
						else
						{
							if(inWorld)
								onStateChanged(oldval_state);
						}

						break;
					case 42004:
						UInt32 oldval_uid = uid;
						uid = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUidChanged(oldval_uid);
						}
						else
						{
							if(inWorld)
								onUidChanged(oldval_uid);
						}

						break;
					case 42005:
						UInt32 oldval_utype = utype;
						utype = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUtypeChanged(oldval_utype);
						}
						else
						{
							if(inWorld)
								onUtypeChanged(oldval_utype);
						}

						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Weapon"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			UInt16 oldval_CD = CD;
			Property prop_CD = pdatas[4];
			if(prop_CD.isBase())
			{
				if(inited && !inWorld)
					onCDChanged(oldval_CD);
			}
			else
			{
				if(inWorld)
				{
					if(prop_CD.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onCDChanged(oldval_CD);
					}
				}
			}

			UInt16 oldval_attackerID = attackerID;
			Property prop_attackerID = pdatas[5];
			if(prop_attackerID.isBase())
			{
				if(inited && !inWorld)
					onAttackerIDChanged(oldval_attackerID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_attackerID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onAttackerIDChanged(oldval_attackerID);
					}
				}
			}

			UInt16 oldval_cruiseSpeed = cruiseSpeed;
			Property prop_cruiseSpeed = pdatas[6];
			if(prop_cruiseSpeed.isBase())
			{
				if(inited && !inWorld)
					onCruiseSpeedChanged(oldval_cruiseSpeed);
			}
			else
			{
				if(inWorld)
				{
					if(prop_cruiseSpeed.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onCruiseSpeedChanged(oldval_cruiseSpeed);
					}
				}
			}

			Vector3 oldval_destForward = destForward;
			Property prop_destForward = pdatas[7];
			if(prop_destForward.isBase())
			{
				if(inited && !inWorld)
					onDestForwardChanged(oldval_destForward);
			}
			else
			{
				if(inWorld)
				{
					if(prop_destForward.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDestForwardChanged(oldval_destForward);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			UInt32 oldval_modelID = modelID;
			Property prop_modelID = pdatas[8];
			if(prop_modelID.isBase())
			{
				if(inited && !inWorld)
					onModelIDChanged(oldval_modelID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelIDChanged(oldval_modelID);
					}
				}
			}

			Byte oldval_modelScale = modelScale;
			Property prop_modelScale = pdatas[9];
			if(prop_modelScale.isBase())
			{
				if(inited && !inWorld)
					onModelScaleChanged(oldval_modelScale);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelScale.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelScaleChanged(oldval_modelScale);
					}
				}
			}

			UInt16 oldval_moveSpeed = moveSpeed;
			Property prop_moveSpeed = pdatas[10];
			if(prop_moveSpeed.isBase())
			{
				if(inited && !inWorld)
					onMoveSpeedChanged(oldval_moveSpeed);
			}
			else
			{
				if(inWorld)
				{
					if(prop_moveSpeed.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMoveSpeedChanged(oldval_moveSpeed);
					}
				}
			}

			string oldval_name = name;
			Property prop_name = pdatas[11];
			if(prop_name.isBase())
			{
				if(inited && !inWorld)
					onNameChanged(oldval_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onNameChanged(oldval_name);
					}
				}
			}

			UInt16 oldval_ownerID = ownerID;
			Property prop_ownerID = pdatas[12];
			if(prop_ownerID.isBase())
			{
				if(inited && !inWorld)
					onOwnerIDChanged(oldval_ownerID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_ownerID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onOwnerIDChanged(oldval_ownerID);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			UInt32 oldval_spaceUType = spaceUType;
			Property prop_spaceUType = pdatas[13];
			if(prop_spaceUType.isBase())
			{
				if(inited && !inWorld)
					onSpaceUTypeChanged(oldval_spaceUType);
			}
			else
			{
				if(inWorld)
				{
					if(prop_spaceUType.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onSpaceUTypeChanged(oldval_spaceUType);
					}
				}
			}

			SByte oldval_state = state;
			Property prop_state = pdatas[14];
			if(prop_state.isBase())
			{
				if(inited && !inWorld)
					onStateChanged(oldval_state);
			}
			else
			{
				if(inWorld)
				{
					if(prop_state.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onStateChanged(oldval_state);
					}
				}
			}

			UInt32 oldval_uid = uid;
			Property prop_uid = pdatas[15];
			if(prop_uid.isBase())
			{
				if(inited && !inWorld)
					onUidChanged(oldval_uid);
			}
			else
			{
				if(inWorld)
				{
					if(prop_uid.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUidChanged(oldval_uid);
					}
				}
			}

			UInt32 oldval_utype = utype;
			Property prop_utype = pdatas[16];
			if(prop_utype.isBase())
			{
				if(inited && !inWorld)
					onUtypeChanged(oldval_utype);
			}
			else
			{
				if(inWorld)
				{
					if(prop_utype.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUtypeChanged(oldval_utype);
					}
				}
			}

		}
	}
}