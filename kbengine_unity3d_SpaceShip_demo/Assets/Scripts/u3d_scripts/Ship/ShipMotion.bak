using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class ShipMotion : MonoBehaviour
{


    [HideInInspector] float MoveSpeed = 0.2f;
    [HideInInspector] float RollSpeed = 0.5f;
    [HideInInspector] float AccelerateSpeed = 0.2f;

    [HideInInspector] Follow cameraFllow = null;
    [HideInInspector] public GameObject mainCamera = null;

    //----------------喷火特效设置------------//

    [HideInInspector] float penghuo_lengthscale = 0.2f;
    [HideInInspector] float penghuo_acc_lengthscale = 1.0f;

    [HideInInspector] ParticleSystemRenderer penghuo_left_1, penghuo_left_2, penghuo_left_3;
    [HideInInspector] ParticleSystemRenderer penghuo_middle_1, penghuo_middle_2, penghuo_middle_3;
    [HideInInspector] ParticleSystemRenderer penghuo_right_1, penghuo_right_2, penghuo_right_3;

    //---------------子弹-------------------//
    [HideInInspector] GameObject bullet_bar = null;
    [HideInInspector] GameObject bullet_parent = null;

    //---------------飞行姿态----------------//
    [HideInInspector] Animator _animator;
    [HideInInspector] FlySate _state = FlySate.FLY_IDLE;

    public enum FlySate
    {
        FLY_IDLE,      //空闲状态
        FLY_TURN_LEFT, //向左转
        FLY_LEFT_RECOVER,//左转恢复平衡位置
        FLY_TURN_RIGHT, //向右转
        FLY_RIGHT_RECOVER //右转恢复平衡
    }

    //----------------------------------
    void KeyMapBind()
    {
        KeyMap.singleton.MoveForward = KeyCode.W;
        KeyMap.singleton.MoveBack = KeyCode.S;
        KeyMap.singleton.RollLeft = KeyCode.A;
        KeyMap.singleton.RollRight = KeyCode.D;
        KeyMap.singleton.MoveJump = KeyCode.Space;
        KeyMap.singleton.Accelerate = KeyCode.Mouse1;
        KeyMap.singleton.Shotting = KeyCode.Mouse0;

    }
    // Use this for initialization

    void InitPengHuo()
    {
        penghuo_left_1 = GameObject.Find("penhuo_left_1").GetComponent<ParticleSystemRenderer>();
        penghuo_left_2 = GameObject.Find("penhuo_left_2").GetComponent<ParticleSystemRenderer>();
        penghuo_left_3 = GameObject.Find("penhuo_left_3").GetComponent<ParticleSystemRenderer>();

        penghuo_middle_1 = GameObject.Find("penhuo_middle_1").GetComponent<ParticleSystemRenderer>();
        penghuo_middle_2 = GameObject.Find("penhuo_middle_2").GetComponent<ParticleSystemRenderer>();
        penghuo_middle_3 = GameObject.Find("penhuo_middle_3").GetComponent<ParticleSystemRenderer>();

        penghuo_right_1 = GameObject.Find("penhuo_right_1").GetComponent<ParticleSystemRenderer>();
        penghuo_right_2 = GameObject.Find("penhuo_right_2").GetComponent<ParticleSystemRenderer>();
        penghuo_right_3 = GameObject.Find("penhuo_right_3").GetComponent<ParticleSystemRenderer>();

        if (penghuo_left_1 == null || penghuo_left_2 == null || penghuo_left_2 == null ||
            penghuo_middle_1 == null || penghuo_middle_2 == null || penghuo_middle_3 == null ||
            penghuo_right_1 == null || penghuo_right_2 == null || penghuo_right_3 == null)
        {
            Debug.Assert(false);
        }
    }

    void InitMainCamera()
    {
        // 设置主摄像机跟随
        mainCamera = GameObject.Find("Main Camera");
        if (mainCamera == null)
        {
            Debug.Log("mainCamera not found:" + cameraFllow);
            Debug.Assert(false);
        }
        cameraFllow = mainCamera.GetComponent<Follow>();
        if (cameraFllow == null)
        {
            Debug.Log("cameraFllow not found:" + cameraFllow);
            Debug.Assert(false);
        }

        cameraFllow.Target = transform;
    }

    void InitFlyController()
    {
        _animator = GetComponent<Animator>();
        if (_animator == null)
        {
            Debug.Log("not found fly_animator!!!");
            Debug.Assert(false);
        }
    }

    void InitBullet()
    {
        bullet_bar = (GameObject)Resources.Load("character/spacecraft02/prefab/bullet_shoot");

        if (bullet_bar == null)
        {
            Debug.Log("not found bullet_bar!!!");
            Debug.Assert(false);
        }

        bullet_parent = GameObject.Find("bullet_born");
        if (bullet_parent == null)
        {
            Debug.Log("not found bullet_born!!!");
            Debug.Assert(false);
        }
    }

    private void ChangeState(FlySate state)
    {
        if (state != _state )
        {
            _state = state;
            switch (_state)
            {
                case FlySate.FLY_IDLE:
                    _animator.SetBool("isIdle", true);
                    _animator.SetBool("isTurnLeft", false);
                     _animator.SetBool("isTurnRight", false);
                    break;
                case FlySate.FLY_TURN_LEFT:
                    _animator.SetBool("isIdle", false);
                    _animator.SetBool("isTurnLeft", true);
                     _animator.SetBool("isTurnRight", false);

                    break;
                case FlySate.FLY_TURN_RIGHT:
                    _animator.SetBool("isIdle", false);
                    _animator.SetBool("isTurnLeft", false);
                    _animator.SetBool("isTurnRight", true);

                    break;
                default:
                    break;
            }
        }       
    }

    void SetPenghuoValue(bool accelerate)
    {
        float symbol = penghuo_left_1.lengthScale > 0.0f ? 1.0f : -1.0f;
        float value = symbol * Mathf.Abs(accelerate ? penghuo_acc_lengthscale : penghuo_lengthscale);
        if (Mathf.Abs(Mathf.Abs(value) - Mathf.Abs(penghuo_left_1.lengthScale)) < 0.01)
        {
            return;
        }

        penghuo_left_1.lengthScale = value;
        penghuo_left_2.lengthScale = value;
        penghuo_left_3.lengthScale = value;

        penghuo_middle_1.lengthScale = value;
        penghuo_middle_2.lengthScale = value;
        penghuo_middle_3.lengthScale = value;

        penghuo_right_1.lengthScale = value;
        penghuo_right_2.lengthScale = value;
        penghuo_right_3.lengthScale = value;
    }
    void SetPenghuoDir(bool dir)
    {
        float symbol = dir ? -1.0f : 1.0f;
        if (penghuo_left_1.lengthScale * symbol > 0)
        {
            return;
        }

        penghuo_left_1.lengthScale = symbol * Mathf.Abs(penghuo_left_1.lengthScale);
        penghuo_left_2.lengthScale = symbol * Mathf.Abs(penghuo_left_2.lengthScale);
        penghuo_left_3.lengthScale = symbol * Mathf.Abs(penghuo_left_3.lengthScale);

        penghuo_middle_1.lengthScale = symbol * Mathf.Abs(penghuo_middle_1.lengthScale);
        penghuo_middle_2.lengthScale = symbol * Mathf.Abs(penghuo_middle_2.lengthScale);
        penghuo_middle_3.lengthScale = symbol * Mathf.Abs(penghuo_middle_3.lengthScale);

        penghuo_right_1.lengthScale = symbol * Mathf.Abs(penghuo_right_1.lengthScale);
        penghuo_right_2.lengthScale = symbol * Mathf.Abs(penghuo_right_2.lengthScale);
        penghuo_right_3.lengthScale = symbol * Mathf.Abs(penghuo_right_3.lengthScale);
    }

    private void BulletShooting()
    {
        GameObject sub_bar = Instantiate(bullet_bar);
        if (sub_bar == null)
        {
            return;
        }
        sub_bar.transform.parent = bullet_parent.transform;
        sub_bar.transform.position = bullet_parent.transform.position;
        sub_bar.transform.rotation = bullet_parent.transform.rotation;
        Bullet bullet_script = sub_bar.GetComponent<Bullet>();
        bullet_script.Speed = 10.0f;
        bullet_script.Scale = 70f;

    }

    private void Awake()
    {
        InitMainCamera();

        InitPengHuo();

        InitFlyController();

        InitBullet();      
    }
    void Start()
    {
        KeyMapBind();
    }

    // Update is called once per frame
    void Update()
    {
        int clickcount = 0;
        if (Input.GetKey(KeyMap.singleton.Shotting))
        {
            //           Debug.Log("您按下了鼠标左键");
            clickcount += 1;
            Debug.Log("clickcount:" + clickcount);
            BulletShooting();
        }

        SetPenghuoValue(Input.GetKey(KeyMap.singleton.Accelerate));

        if (Input.GetKey(KeyMap.singleton.MoveForward))
        {
            //           Debug.Log("您按下了W键");
            bool accelerate = Input.GetKey(KeyMap.singleton.Accelerate);
            transform.position += transform.forward * (accelerate ? MoveSpeed : (MoveSpeed + AccelerateSpeed));
            SetPenghuoDir(true);
        }
        else if (Input.GetKey(KeyMap.singleton.MoveBack))
        {
            //           Debug.Log("您按下了S键");
            bool accelerate = Input.GetKey(KeyMap.singleton.Accelerate);
            transform.position -= transform.forward * (accelerate ? MoveSpeed : (MoveSpeed + AccelerateSpeed));
            SetPenghuoDir(false);
        }
        else if (Input.GetKey(KeyMap.singleton.RollLeft))
        {
            //           Debug.Log("您按下了A键");
            transform.RotateAround(transform.position, transform.up, RollSpeed);
            ChangeState(FlySate.FLY_TURN_LEFT);
        }
        else if (Input.GetKey(KeyMap.singleton.RollRight))
        {
            //           Debug.Log("您按下了D键");
            transform.RotateAround(transform.position, transform.up, -RollSpeed);
            ChangeState(FlySate.FLY_TURN_RIGHT);
        }
        else
        {
            ChangeState(FlySate.FLY_IDLE);
        }
    }
}
